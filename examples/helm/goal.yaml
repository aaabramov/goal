# This example combines two `goal` features:
# 1. Environmental executions: `goal run helm-upgrade --on dev`
# 2. Built-in `kubectl_context` assertions upon execution
#    to prevent accidental runs on wrong environment.
#
# NOTE: Your can list available `kubectl` contexts with `kubectl config get-contexts`
#
# Usage:
#   goal run dry-run --on dev
#   goal run dry-run --on stage
#
#   goal run upgrade --on dev
#   goal run upgrade --on stage

dry-run:
  envs:
    dev:
      desc: Dry run upgrade on dev
      assert:
        - kubectl_context: dev-cluster
      cmd: helm
      args:
        - upgrade
        - release-name
        - -f
        - values.yaml
        - -f
        - values/dev.yaml
        - .
        - --dry-run
    stage:
      desc: Dry run upgrade on stage
      assert:
        - kubectl_context: stage-cluster
      cmd: helm
      args:
        - upgrade
        - release-name
        - -f
        - values.yaml
        - -f
        - values/stage.yaml
        - .
        - --dry-run

upgrade:
  envs:
    dev:
      desc: Run upgrade on dev
      assert:
        - kubectl_context: dev-cluster
      cmd: helm
      args:
        - upgrade
        - release-name
        - -f
        - values.yaml
        - -f
        - values/dev.yaml
        - .
    stage:
      desc: Run upgrade on stage
      assert:
        - kubectl_context: stage-cluster
      cmd: helm
      args:
        - upgrade
        - release-name
        - -f
        - values.yaml
        - -f
        - values/stage.yaml
        - .
