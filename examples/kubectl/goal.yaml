# This example combines two `goal` features:
# 1. Environmental executions: `goal run apply --on dev`
# 2. Built-in `kubectl_context` assertions upon execution
#    to prevent accidental runs on wrong environment.
#
# NOTE: list your contexts with `kubectl config get-contexts`
#
# Usage:
#   goal run pods --on dev
#   goal run pods --on stage
#
#   goal run apply --on dev
#   goal run apply --on stage

pods:
  envs:
    dev:
      desc: Kubectl get app pods on dev
      cmd: kubectl
      args:
        - get
        - pods
        - -l
        - app=nginx
      assert:
        - kubectl_context: gke_project_region_dev
    stage:
      desc: Kubectl get app pods on stage
      cmd: kubectl
      args:
        - get
        - pods
        - -l
        - app=nginx
      assert:
        - kubectl_context: gke_project_region_stage

apply:
  envs:
    dev:
      desc: Kubectl apply on dev
      cmd: kubectl
      args:
        - apply
        - -f
        - deployment.yaml
      assert:
        - kubectl_context: gke_project_region_dev
    stage:
      desc: Kubectl apply on stage
      cmd: kubectl
      args:
        - apply
        - -f
        - deployment.yaml
      assert:
        - kubectl_context: gke_project_region_stage
